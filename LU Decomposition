function [L, U, P] = luFactor(A)
% luFactor(A)
%	LU decomposition with pivotiing
% inputs:
%	A = coefficient matrix
% outputs:
%	L = lower triangular matrix
%	U = upper triangular matrix
%       P = the permutation matrix
[n,n] = size(A);
L=eye(n,n);
if L ~= ischar(A)
    error('wrong size')
end
P=L;
U=A;
for k=1:n
    [pivot m]=max(abs(U(k:n,k)));
    m=m+k-1;
    if m ~= k
        new=U(k,:);
        U(k,:)=U(m,:);
        U(m,:)=new;
        new=P(k,:);
        P(k,:)=P(m,:);
        P(m,:)=new;
        if k >= 2
            new=L(k,:);
            L(k,:)=L(m,:);
            L(m,:)=new;
            new=P(k,:);
            P(k,:)=P(m,:);
            P(m,:)=new;
        end
       
    end
    for j = k+1:n
        L(j,k)=U(j,k)/U(k,k);
        U(j,:)= U(j,:)-L(j,k)*U(k,:);
        
    end
        if P*A == L*U
            disp('correct')
        end
end
